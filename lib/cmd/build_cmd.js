/**
 * This module is based on webpack. It provides development and deploy features.
 */const{doCmd,rm,isValidLibName}=require("../util/utils"),print=require("../util/print"),_=require("lodash"),{generateWebpackConfig}=require("../webpack/config"),{generateWebpackLibConfig}=require("../webpack/libconfig"),{loadHoneyConfig}=require("../util/config"),webpack=require("webpack"),{cdnCmd}=require("./cdn_cmd");function asyncWebpackBuild(a){return new Promise((b,c)=>{webpack(a,(a,d)=>a?void c(a):void(process.stdout.write(d.toString({colors:!0,modules:!1,children:!1,// If you are using ts-loader, setting this to true will make TypeScript errors show up during build.
chunks:!1,chunkModules:!1})+"\n\n"),d.hasErrors()&&(print.error("  Build failed with errors.\n"),process.exit(1)),print.info("  Build complete.\n"),b()))})}async function buildCmd(){try{await doCmd("npm i --save core-js@3"),await doCmd("npm i")}catch(a){print.error(a)}const a=loadHoneyConfig();try{await rm(a.dist);let b=null;//build
if(a.isLib){// check lib option
if(!a.libName)return void print.error("\u8BF7\u5728package.json\u7684honeyConfig\u91CC\u914D\u7F6ElibName");if(!isValidLibName(a.libName))return void print.error("libName\u5FC5\u987B\u9075\u5FAA\u86C7\u5F62\u547D\u540D");a.umdName||(a.umdName=_.camelCase(a.libName)),b=generateWebpackLibConfig(a)}else b=generateWebpackConfig(a);await asyncWebpackBuild(b),a.cdn&&(await cdnCmd())}catch(a){print.error(a)}}module.exports={buildCmd};