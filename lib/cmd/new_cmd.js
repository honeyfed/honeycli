const{makeGithubUrlForTbTemplate,isValidName,rm}=require("../util/utils"),{gitClone}=require("../git/git"),{GitError}=require("../util/errors"),inquirer=require("inquirer"),{loadTemplates}=require("../util/config"),print=require("../util/print");async function newCmd(){try{const a=await loadTemplates();if(!a)throw new Error("no templates found");// ask project name
const b=await inquirer.prompt([{type:"input",name:"projectName",message:"project name",validate:a=>a?!!isValidName(a)||"invalid project name(only alphabet number _ - were allowed)":"project name should not be empty"},{type:"list",name:"template",message:"choose template",choices:()=>a.map(a=>({name:`${a.name} (${a.description}) - ${a.valid?"valid":"invalid"}`,value:a}))}]);if(b.template.valid){const a=makeGithubUrlForTbTemplate(b.template.name);await gitClone(a,b.projectName),await rm(b.projectName+"/.git")}else throw new Error("invalid template: "+b.template.name)}catch(a){a instanceof GitError?print.error(a.message):print.error(a)}}module.exports={newCmd};